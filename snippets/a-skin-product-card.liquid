<div class="product-card x-flex-1 x-border-gray-500 x-border-[1px] x-snap-start x-ml-[-1px] x-mt-[-1px]">
  <div class="product-image x-group md:x-min-w-full x-min-w-[400px] x-h-[330px] x-flex x-flex-col">
    <div class="x-w-full x-flex-1">
      <img
        class="x-w-full x-h-full x-object-cover"
        src="{{ product.featured_image | img_url: '600x600' }}"
        alt="{{ product.title }}"
      >
    </div>

    <!-- Add to Cart Button (visible only on lg and larger - 1280px and above) -->
    <button
      class="add-to-cart-btn x-absolute x-bg-[#F2E8DA] x-bg-opacity-60 x-bottom-0 x-w-full x-h-0 group-hover:x-h-16 x-transition-all x-duration-300"
      data-product-id="{{ product.variants.first.id }}"
    >
      <span class="button-text">ADD TO CART</span>
    </button>

    <style>
      .add-to-cart-btn {
        display: none !important;
      }
      @media (min-width: 1280px) {
        .add-to-cart-btn {
          display: block !important;
        }
      }
    </style>

    <!-- Plus Button (visible below lg - 1280px and below) -->
    <button
      class="plus-btn x-absolute x-bottom-4 x-right-4 x-bg-black x-text-white x-rounded-full x-w-[40px] x-h-[40px] x-flex x-items-center x-justify-center lg:x-hidden"
      data-product-id="{{ product.variants.first.id }}"
    >
      <span class="x-text-3xl"><i class="bx bx-plus"></i></span>
    </button>
  </div>

  <!-- Variant selection area (hidden by default) -->
  <div
    class="product-variants x-absolute x-bottom-0 x-w-full x-flex x-flex-row x-justify-center x-items-center x-transition-all x-duration-300 x-gap-3 x-py-4 x-bg-[#FFE4D9] x-bg-opacity-40 x-z-[2]"
    style="transform: translateY(0px)"
  >
    <!-- Back button to hide swatches and show "Add to Cart" button -->
    <button
      class="back-btn x-bg-[#3c3c3c] x-pl-1 x-cursor-pointer x-absolute x-left-4 x-text-white x-h-12 x-w-12 x-rounded-full x-flex x-justify-center x-items-center"
      style="margin-right: 10px;"
    >
      <i class="bx bx-arrow-back"></i>
    </button>

    {% for variant in product.variants %}
      {% assign color_hexcode = variant.metafields.custom.color_hexcode %}
      <!-- Check if color_hexcode exists; if not, fallback to variant title -->
      {% if color_hexcode %}
        <button
          class="variant-btn x-w-[30px] x-h-[30px] x-rounded-full x-cursor-pointer x-ring-1 x-ring-black"
          data-variant-id="{{ variant.id }}"
          data-image="{{ variant.featured_image | img_url: '600x600' }}"
          style="background-color: {{ color_hexcode }}; width: 30px; height: 30px; border: none; border-radius: 50%; cursor: pointer;"
        ></button>
      {% else %}
        <!-- Fallback to variant title if no hex code is available -->
        <button
          class="variant-btn"
          data-variant-id="{{ variant.id }}"
          data-image="{{ variant.featured_image | img_url: '600x600' }}"
        >
          {{ variant.title }}
        </button>
      {% endif %}
    {% endfor %}
  </div>

  <a
    href="/products/{{ product.handle }}"
    class="x-relative x-bg-white x-z-[3] product-details x-p-5 x-flex x-items-start x-flex-col x-border-t-[1px] x-border-gray-500"
  >
    <h3>{{ product.title }}</h3>
    <p>{{ product.price | money }}</p>
  </a>
</div>

<style>
  .product-card {
    position: relative;
  }

  .product-image {
    position: relative;
  }

  .plus-btn {
    z-index: 1;
  }

  .add-to-cart-btn {
    z-index: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.add-to-cart-btn, .plus-btn').forEach((button) => {
      button.addEventListener('click', function () {
        const productId = this.getAttribute('data-product-id');
        const productCard = this.closest('.product-card');
        const variantsContainer = productCard.querySelector('.product-variants');
        const isPlusButton = this.classList.contains('plus-btn');
        const plusButtonText = isPlusButton ? this.querySelector('i') : null;
        const buttonText = this.classList.contains('add-to-cart-btn') ? this.querySelector('.button-text') : null;

        // Handle variant selection first for both Add to Cart and Plus button
        if (variantsContainer && variantsContainer.children.length > 2) {
          this.classList.add('x-hidden'); // Hide the button (Add to Cart or Plus)
          variantsContainer.style.transform = 'translateY(-68px)'; // Show the variant options

          document.querySelectorAll('.variant-btn').forEach((variantBtn) => {
            variantBtn.removeEventListener('click', variantSelectHandler); // Ensure no duplicate handlers
            variantBtn.addEventListener('click', variantSelectHandler);

            function variantSelectHandler() {
              const selectedVariantId = this.getAttribute('data-variant-id');

              // Hide variant options
              variantsContainer.style.transform = 'translateY(0px)';

              // Now show the button again and proceed with loading-check-AJAX flow
              if (isPlusButton) {
                button.classList.remove('x-hidden');
                plusButtonText.classList.remove('bx-plus');
                plusButtonText.classList.add('bx-loader', 'bx-spin'); // Show loading spinner for plus button
              } else if (buttonText) {
                buttonText.innerHTML = '<i class="bx bx-loader bx-spin"></i>'; // Show loading spinner for Add to Cart button
              }

              // Simulate loading, then change to checkmark
              setTimeout(function () {
                if (isPlusButton) {
                  plusButtonText.classList.remove('bx-loader', 'bx-spin');
                  plusButtonText.classList.add('bx-check'); // Show checkmark for plus button
                } else if (buttonText) {
                  buttonText.innerHTML = '✔ ADDED TO CART'; // Show checkmark for Add to Cart button
                }

                // Perform AJAX after checkmark, then reset the button
                setTimeout(function () {
                  addToCart(selectedVariantId);
                  resetButton(isPlusButton, plusButtonText, buttonText);
                }, 500); // AJAX delay
              }, 1000); // Loading simulation delay
            }
          });
        } else {
          // Directly add to cart if no variants (for non-variant products)
          if (isPlusButton) {
            plusButtonText.classList.remove('bx-plus');
            plusButtonText.classList.add('bx-loader', 'bx-spin');
          } else if (buttonText) {
            buttonText.innerHTML = '<i class="bx bx-loader bx-spin"></i>';
          }

          setTimeout(function () {
            if (isPlusButton) {
              plusButtonText.classList.remove('bx-loader', 'bx-spin');
              plusButtonText.classList.add('bx-check');
            } else if (buttonText) {
              buttonText.innerHTML = '✔ ADDED TO CART';
            }

            // Perform AJAX for non-variant products
            setTimeout(function () {
              addToCart(productId);
              resetButton(isPlusButton, plusButtonText, buttonText);
            }, 500); // AJAX delay
          }, 1000); // Loading simulation delay
        }
      });
    });

    function addToCart(productId) {
      // Ensure quantity is always set to 1
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: productId, quantity: 1 }), // Ensure quantity is set to 1
      })
        .then((response) => response.json())
        .then((data) => {
          console.log('Product added to cart:', data);
        })
        .catch((error) => {
          console.error('Error adding to cart:', error);
        });
    }

    function resetButton(isPlusButton, plusButtonText, buttonText) {
      setTimeout(() => {
        if (isPlusButton) {
          plusButtonText.classList.remove('bx-check');
          plusButtonText.classList.add('bx-plus'); // Reset to plus icon
          document.querySelectorAll('.plus-btn').forEach((button) => {
            button.classList.remove('x-hidden'); // Show the plus button again
          });
        } else if (buttonText) {
          buttonText.innerHTML = 'ADD TO CART'; // Reset Add to Cart text
          document.querySelectorAll('.add-to-cart-btn').forEach((button) => {
            button.classList.remove('x-hidden'); // Show the Add to Cart button again
          });
        }
      }, 1500); // Delay before resetting the text
    }

    document.querySelectorAll('.back-btn').forEach((button) => {
      button.addEventListener('click', function () {
        const productCard = this.closest('.product-card');
        const addToCartButton = productCard.querySelector('.add-to-cart-btn');
        const plusButton = productCard.querySelector('.plus-btn');
        const variantsContainer = productCard.querySelector('.product-variants');

        // Hide the variants and show the add-to-cart button again
        variantsContainer.style.transform = 'translateY(0px)';
        addToCartButton.classList.remove('x-hidden');
        plusButton.classList.remove('x-hidden');
      });
    });

    document.querySelectorAll('.variant-btn').forEach((button) => {
      button.addEventListener('mouseover', function () {
        const imageUrl = this.getAttribute('data-image');
        const productCard = this.closest('.product-card');
        const productImage = productCard.querySelector('.product-image img');

        productImage.src = imageUrl;
      });
    });
  });
</script>

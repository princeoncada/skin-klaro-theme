<div>
    <div>
        <div class="x-p-[16px] md:x-p-[32px]">
            <div class="x-p-[16px] md:x-p-[32px] x-text-center x-uppercase x-text-[20px] x-text-[24px]">
                Shop Sets
            </div>
        </div>
        <div class="">
            <div
                class="x-flex x-flex-col md:x-grid md:x-grid-cols-3">
                {% for product in collections["sets"].products %}
                    {% render 'a-skin-product-card', product: product %}
                {% endfor %}
            </div>
            
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        applyParallax();
    });

    $(window).on('scroll', function () {
        applyParallax();
    });

    function applyParallax() {
        $('.parallax-sa').each(function () {
            const speed = 0.3; // Adjust the speed for the desired parallax effect
            const initialOffset = 0; // Offset to move the image down initially
            const sectionTop = $(this).parent().offset().top; // Get the top position of the parent element relative to the document
            const scrollPosition = $(window).scrollTop();
            const windowHeight = $(window).height();
            const sectionHeight = $(this).parent().outerHeight();

            // Check if the section is in the viewport
            if (scrollPosition + windowHeight > sectionTop && scrollPosition < sectionTop + sectionHeight) {
                const yPos = (scrollPosition - sectionTop) * speed + initialOffset; // Apply the initial offset
                $(this).css('transform', `translateY(${yPos}px)`);
            }
        });
    }

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.add-to-cart-btn, .plus-btn').forEach((button) => {
                button.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');
                    const productCard = this.closest('.product-card');
                    const variantsContainer = productCard.querySelector('.product-variants');
                    const isPlusButton = this.classList.contains('plus-btn');
                    const plusButtonText = isPlusButton ? this.querySelector('i') : null;
                    const buttonText = this.classList.contains('add-to-cart-btn') ? this.querySelector('.button-text') : null;

                    // Handle variant selection first for both Add to Cart and Plus button
                    if (variantsContainer && variantsContainer.children.length > 2) {
                        this.classList.add('x-hidden'); // Hide the button (Add to Cart or Plus)
                        variantsContainer.style.transform = 'translateY(-68px)'; // Show the variant options

                        document.querySelectorAll('.variant-btn').forEach((variantBtn) => {
                            variantBtn.removeEventListener('click', variantSelectHandler); // Ensure no duplicate handlers
                            variantBtn.addEventListener('click', variantSelectHandler);

                            function variantSelectHandler() {
                                const selectedVariantId = this.getAttribute('data-variant-id');

                                // Hide variant options
                                variantsContainer.style.transform = 'translateY(0px)';

                                // Now show the button again and proceed with loading-check-AJAX flow
                                if (isPlusButton) {
                                    button.classList.remove('x-hidden');
                                    plusButtonText.classList.remove('bx-plus');
                                    plusButtonText.classList.add('bx-loader', 'bx-spin'); // Show loading spinner for plus button
                                } else if (buttonText) {
                                    buttonText.innerHTML = '<i class="bx bx-loader bx-spin"></i>'; // Show loading spinner for Add to Cart button
                                }

                                // Simulate loading, then change to checkmark
                                setTimeout(function () {
                                    if (isPlusButton) {
                                        plusButtonText.classList.remove('bx-loader', 'bx-spin');
                                        plusButtonText.classList.add('bx-check'); // Show checkmark for plus button
                                    } else if (buttonText) {
                                        buttonText.innerHTML = '✔ ADDED TO CART'; // Show checkmark for Add to Cart button
                                    }

                                    // Perform AJAX after checkmark, then reset the button
                                    setTimeout(function () {
                                        addToCart(selectedVariantId);
                                        resetButton(isPlusButton, plusButtonText, buttonText);
                                    }, 500); // AJAX delay
                                }, 1000); // Loading simulation delay
                            }
                        });
                    } else {
                        // Directly add to cart if no variants (for non-variant products)
                        if (isPlusButton) {
                            plusButtonText.classList.remove('bx-plus');
                            plusButtonText.classList.add('bx-loader', 'bx-spin');
                        } else if (buttonText) {
                            buttonText.innerHTML = '<i class="bx bx-loader bx-spin"></i>';
                        }

                        setTimeout(function () {
                            if (isPlusButton) {
                                plusButtonText.classList.remove('bx-loader', 'bx-spin');
                                plusButtonText.classList.add('bx-check');
                            } else if (buttonText) {
                                buttonText.innerHTML = '✔ ADDED TO CART';
                            }

                            // Perform AJAX for non-variant products
                            setTimeout(function () {
                                addToCart(productId);
                                resetButton(isPlusButton, plusButtonText, buttonText);
                            }, 500); // AJAX delay
                        }, 1000); // Loading simulation delay
                    }
                });
            });
        });

        document.querySelectorAll('.back-btn').forEach((button) => {
            button.addEventListener('click', function () {
                const productCard = this.closest('.product-card');
                const addToCartButton = productCard.querySelector('.add-to-cart-btn');
                const plusButton = productCard.querySelector('.plus-btn');
                const variantsContainer = productCard.querySelector('.product-variants');

                // Hide the variants and show the add-to-cart button again
                variantsContainer.style.transform = 'translateY(0px)';
                addToCartButton.classList.remove('x-hidden');
                plusButton.classList.remove('x-hidden');
            });
        });

        document.querySelectorAll('.variant-btn').forEach(button => {
            button.addEventListener('mouseover', function () {
                const variantId = this.getAttribute('data-variant-id');
                const imageUrl = this.getAttribute('data-image');
                const productCard = this.closest('.product-card');
                const productImage = productCard.querySelector('.product-image .holder');

                productImage.style.backgroundImage = `url(${imageUrl})`;
            });
        });

        function addToCart(productId) {
            // Ensure quantity is always set to 1
            fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: productId, quantity: 1 }), // Ensure quantity is set to 1
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log('Product added to cart:', data);
                })
                .catch((error) => {
                    console.error('Error adding to cart:', error);
                });
        }

        function resetButton(isPlusButton, plusButtonText, buttonText) {
            setTimeout(() => {
                if (isPlusButton) {
                    plusButtonText.classList.remove('bx-check');
                    plusButtonText.classList.add('bx-plus'); // Reset to plus icon
                    document.querySelectorAll('.plus-btn').forEach((button) => {
                        button.classList.remove('x-hidden'); // Show the plus button again
                    });
                } else if (buttonText) {
                    buttonText.innerHTML = 'ADD TO CART'; // Reset Add to Cart text
                    document.querySelectorAll('.add-to-cart-btn').forEach((button) => {
                        button.classList.remove('x-hidden'); // Show the Add to Cart button again
                    });
                }
            }, 1500); // Delay before resetting the text
        }

</script>

<style>
    @keyframes scrollleft {
        to {
            left: -180px;
        }
    }

    .item {
        left: max(calc(200px * 8), 100%);
        animation-name: scrollleft;
        animation-duration: 30s;
        animation-timing-function: linear;
        animation-iteration-count: infinite;
    }

    .wrapper:hover .item {
        animation-play-state: paused;
    }

    .item-1 {
        animation-delay: calc(30s / 8 * (8 - 1) * -1);
    }

    .item-2 {
        animation-delay: calc(30s / 8 * (8 - 2) * -1);
    }

    .item-3 {
        animation-delay: calc(30s / 8 * (8 - 3) * -1);
    }

    .item-4 {
        animation-delay: calc(30s / 8 * (8 - 4) * -1);
    }

    .item-5 {
        animation-delay: calc(30s / 8 * (8 - 5) * -1);
    }

    .item-6 {
        animation-delay: calc(30s / 8 * (8 - 6) * -1);
    }

    .item-7 {
        animation-delay: calc(30s / 8 * (8 - 7) * -1);
    }

    .item-8 {
        animation-delay: calc(30s / 8 * (8 - 8) * -1);
    }
</style>
<div class="container p-4">
  <!-- Flickity Carousel for Main and Variant Images -->
  <div id="mainCarousel" class="carousel">
    <div class="carousel-cell">
      <img
        id="mainImage"
        src="{{ product.media.first.preview_image | image_url: width: 1000 }}"
        alt="{{ product.title }}"
        class="x-w-full"
        width="1000"
        height="auto"
      >
    </div>
  </div>

  <!-- Thumbnails -->
  <div id="thumbnailCarousel" class="carousel-thumbnails x-px-[16px]">
    <div class="carousel-cell">
      <img
        src="{{ product.media.first.preview_image | image_url: width: 1000 }}"
        alt="Main Product Image"
        class="x-cursor-pointer x-object-cover x-w-full x-h-full"
        width="1000"
        height="auto"
        onclick="changeImage('{{ product.media.first.preview_image | image_url: width: 1000 }}')"
      >
    </div>
  </div>
</div>

<!-- Variant Selector -->
<div class="x-w-full x-mb-4 x-mt-6">
  <div class="x-flex x-gap-4 x-px-[20px] x-justify-start">
    {% for variant in product.variants %}
      <button
        class="variant-button {% if forloop.first %} active {% endif %} x-flex x-items-center x-justify-center x-rounded-full x-w-auto x-h-auto x-border-2"
        style="border-color: {{ variant.metafields.custom.color_hexcode }};"
        data-variant-id="{{ variant.id }}"
        data-main-img="{{ variant.image | image_url: width: 1000 }}"
        data-img-src="{{ variant.metafields.custom.img_src | replace: '[', '' | replace: ']', '' | replace: '"', '' }}"
        data-price="{{ variant.price | money }}"
        data-availability="{{ variant.available }}"
        onclick="changeVariant(this)"
      >
        <span
          class="inner-circle x-block x-rounded-full x-w-[20px] x-h-[20px]"
          style="background-color: {{ variant.metafields.custom.color_hexcode }};"
        ></span>
      </button>
    {% endfor %}
  </div>
</div>

<!-- Product Title -->
<div class="x-w-full x-mb-2 x-px-[16px] x-text-start">
  <h2 class="x-text-5xl x-font-bold">{{ product.title }}</h2>
</div>

<!-- Variant Price -->
<div class="x-w-full x-mb-7 x-px-[25px] x-text-start">
  <p id="variant-price" class="x-text-2xl">$0.00</p>
</div>

<!-- Product Description -->
<div class="x-w-full x-mb-4 x-px-[16px] x-text-justify">
  <h2 class="x-text-3xl">{{ product.description }}</h2>
</div>

<!-- Variant Availability -->
<div class="x-w-full x-mb-4 x-text-center"><p id="variant-availability" class="x-text-md">Available</p></div>

<!-- Quantity Selector -->
<div class="x-w-full x-mb-4 x-text-center">
  <button id="decreaseQty" class="x-text-xl x-font-bold x-px-4 x-py-2 x-bg-gray-300 x-rounded">-</button>
  <input
    id="quantityInput"
    type="number"
    value="1"
    min="1"
    class="x-w-12 x-text-center x-border-none x-bg-transparent x-outline-none x-text-black"
    readonly
  >
  <button id="increaseQty" class="x-text-xl x-font-bold x-px-4 x-py-2 x-bg-gray-300 x-rounded">+</button>
</div>

<!-- Checkout Button -->
<div class="x-w-full x-mb-4 x-text-center">
  <button
    id="checkoutButton"
    class="x-text-xl x-font-bold x-py-2 x-px-4 x-text-black x-border x-border-black x-bg-transparent x-rounded-none"
  >
    Checkout
  </button>
</div>

<!-- JavaScript for Carousel and Checkout Functionality -->
<script>
  let flickityInstance;
  let thumbnailFlickityInstance;
  let selectedVariantId = null;

  document.addEventListener('DOMContentLoaded', function () {
    // Initialize Flickity for the main carousel
    flickityInstance = new Flickity('#mainCarousel', {
      wrapAround: true,
      pageDots: false,
      prevNextButtons: false,
      draggable: true,
    });

    // Initialize Flickity for the thumbnail carousel
    thumbnailFlickityInstance = new Flickity('#thumbnailCarousel', {
      asNavFor: '#mainCarousel',
      contain: true,
      pageDots: false,
      prevNextButtons: false,
      draggable: true,
      freeScroll: false,
      cellAlign: 'left',
    });

    const firstVariantButton = document.querySelector('.variant-button.active');
    if (firstVariantButton) {
      changeVariant(firstVariantButton);
    }
  });

  // Function to update the main image and variant images in Flickity
  function changeVariant(button) {
    const buttons = document.querySelectorAll('.variant-button');
    buttons.forEach((btn) => btn.classList.remove('active'));
    button.classList.add('active');
    selectedVariantId = button.getAttribute('data-variant-id');

    const mainImageUrl = button.getAttribute('data-main-img');
    const variantImages = button.getAttribute('data-img-src');
    const variantAvailability = button.getAttribute('data-availability') === 'true' ? 'Available' : 'Out of Stock';
    const variantPrice = button.getAttribute('data-price');

    // Update availability and price
    document.getElementById('variant-availability').textContent = variantAvailability;
    document.getElementById('variant-price').textContent = variantPrice;

    // Disable checkout button if out of stock
    const checkoutButton = document.getElementById('checkoutButton');
    if (variantAvailability === 'Out of Stock') {
      checkoutButton.disabled = true;
      checkoutButton.classList.add('x-opacity-50', 'x-cursor-not-allowed'); // Add styles for a disabled button
    } else {
      checkoutButton.disabled = false;
      checkoutButton.classList.remove('x-opacity-50', 'x-cursor-not-allowed'); // Remove styles when in stock
    }

    // Clear and update the main and thumbnail carousels
    while (flickityInstance.cells.length > 0) {
      flickityInstance.remove(flickityInstance.cells[0].element);
    }
    while (thumbnailFlickityInstance.cells.length > 0) {
      thumbnailFlickityInstance.remove(thumbnailFlickityInstance.cells[0].element);
    }

    // Add the main image to the main carousel
    const mainImageCell = document.createElement('div');
    mainImageCell.className = 'carousel-cell';
    mainImageCell.innerHTML = `<img src="${mainImageUrl}" alt="Main Product Image" class="w-full h-auto">`;
    flickityInstance.append(mainImageCell);

    // Add the main image to the thumbnail carousel
    const mainThumbnail = document.createElement('div');
    mainThumbnail.className = 'carousel-cell';
    mainThumbnail.innerHTML = `<img src="${mainImageUrl}" alt="Main Product Image" class="cursor-pointer object-cover w-full h-full" onclick="changeImage('${mainImageUrl}')">`;
    thumbnailFlickityInstance.append(mainThumbnail);

    // Add variant images to both carousels if they exist
    if (variantImages) {
      const variantImagesArray = variantImages.split(',');
      variantImagesArray.forEach(function (imageUrl) {
        // Add to the main carousel
        const imageCell = document.createElement('div');
        imageCell.className = 'carousel-cell';
        imageCell.innerHTML = `<img src="${imageUrl.trim()}" alt="Variant Image" class="w-full h-auto">`;
        flickityInstance.append(imageCell);

        // Add to the thumbnail carousel
        const thumbnailCell = document.createElement('div');
        thumbnailCell.className = 'carousel-cell';
        thumbnailCell.innerHTML = `<img src="${imageUrl.trim()}" alt="Variant Thumbnail" class="cursor-pointer object-cover w-full h-full" onclick="changeImage('${imageUrl.trim()}')">`;
        thumbnailFlickityInstance.append(thumbnailCell);
      });
    }

    // Reload Flickity for both carousels
    flickityInstance.reloadCells();
    thumbnailFlickityInstance.reloadCells();
    flickityInstance.select(0);
    thumbnailFlickityInstance.select(0); // Highlight the first thumbnail
  }

  // Example styles to visually disable the checkout button
  document.addEventListener('DOMContentLoaded', function () {
    const checkoutButton = document.getElementById('checkoutButton');
    if (checkoutButton.disabled) {
      checkoutButton.classList.add('x-opacity-50', 'x-cursor-not-allowed');
    }
  });
  // Main image update
  function changeImage(imageUrl) {
    const mainImage = document.getElementById('mainImage');
    fadeOut(mainImage, function () {
      mainImage.src = imageUrl;
      fadeIn(mainImage);
    });

    // Connection between thumbnail and image selected
    const thumbnailIndex = Array.from(thumbnailFlickityInstance.cells).findIndex(
      (cell) => cell.element.querySelector('img').src === imageUrl
    );
    if (thumbnailIndex >= 0) {
      thumbnailFlickityInstance.select(thumbnailIndex);
    }
  }

  // Fade out effect
  function fadeOut(element, callback) {
    element.style.opacity = 1;
    (function fade() {
      if ((element.style.opacity -= 0.1) < 0) {
        element.style.display = 'none';
        if (callback) callback();
      } else {
        requestAnimationFrame(fade);
      }
    })();
  }

  // Fade in effect
  function fadeIn(element) {
    element.style.opacity = 0;
    element.style.display = 'block';
    (function fade() {
      let val = parseFloat(element.style.opacity);
      if (!((val += 0.1) > 1)) {
        element.style.opacity = val;
        requestAnimationFrame(fade);
      }
    })();
  }

  // Global variable to track the quantity

  let selectedQuantity = 1;

  // Function to increase quantity
  document.getElementById('increaseQty').addEventListener('click', function () {
    selectedQuantity++;
    document.getElementById('quantityInput').value = selectedQuantity;
  });

  // Function to decrease quantity
  document.getElementById('decreaseQty').addEventListener('click', function () {
    if (selectedQuantity > 1) {
      selectedQuantity--;
      document.getElementById('quantityInput').value = selectedQuantity;
    }
  });

  // Checkout button click listener
  document.getElementById('checkoutButton').addEventListener('click', function () {
    if (selectedVariantId) {
      // Ensure selectedQuantity is passed to the addToCart function
      const selectedQuantity = parseInt(document.getElementById('quantityInput').value);
      addToCart(selectedVariantId, selectedQuantity);
    } else {
      alert('Please select a variant before proceeding to checkout.');
    }
  });

  // Function to add an item to the cart and fetch the updated item count
  function addToCart(productId, selectedQuantity) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ id: productId, quantity: selectedQuantity }), // Ensure quantity is passed here
    })
      .then((response) => response.json())
      .then((data) => {
        console.log('Product added to cart:', data);
        updateCartCount();
      })
      .catch((error) => {
        console.error('Error adding to cart:', error);
      });
  }

  // Function to dynamically update the cart count
  function updateCartCount() {
    fetch('/cart.js')
      .then((response) => response.json())
      .then((cartData) => {
        const itemCount = cartData.item_count;
        const cartCountBubble = document.querySelector('.cart-count-bubble span');
        const cartIconBubble = document.getElementById('cart-icon-bubble');

        if (itemCount > 0) {
          // If the bubble exists, update the count
          if (cartCountBubble) {
            cartCountBubble.textContent = itemCount;
          } else {
            // If no bubble exists, create it
            const newCountBubble = document.createElement('div');
            newCountBubble.classList.add('cart-count-bubble');
            newCountBubble.innerHTML = `<span aria-hidden="true">${itemCount}</span>`;
            cartIconBubble.appendChild(newCountBubble);
          }
        } else {
          // If the cart is empty, remove the bubble
          if (cartCountBubble) {
            cartCountBubble.parentElement.remove();
          }
        }
      })
      .catch((error) => {
        console.error('Error fetching updated cart:', error);
      });
  }
</script>

<!-- Styles -->
<style>
  input[type='number']::-webkit-outer-spin-button,
  input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield;
  }

  .variant-button {
    transition: all 0.3s ease;
  }

  .variant-button.active {
    border-color: white;
    /* White border for the outer circle when selected */
  }

  .inner-circle {
    transition: all 0.3s ease;
  }

  .variant-button.active .inner-circle {
    border: 2px solid white;
    /* White border for the inner circle */
  }

  .carousel-cell {
    width: 100%;
    margin-right: 10px;
    background: none;
    border-radius: 5px;
    overflow: hidden;
  }

  .carousel-cell img {
    display: block;
    width: 100%;
    height: auto;
    max-height: 500px;
    object-fit: cover;
    margin: 0 auto;
    padding: 10px;
  }

  .carousel-thumbnails .carousel-cell {
    width: 100px;
    height: 100px;
    background: none;
    object-fit: cover;
    margin: 0 auto;
    position: relative;
  }

  .carousel-thumbnails .carousel-cell img {
    cursor: pointer;
    opacity: 0.6;
    transition: opacity 0.3s;
    background: none;
  }

  .carousel-thumbnails .carousel-cell.is-selected::after {
    content: '';
    display: block;
    width: 100%;
    height: 2px;
    background-color: black;
    position: absolute;
    bottom: 0;
    left: 0;
    opacity: 1;
  }

  .carousel-thumbnails .carousel-cell.is-selected img {
    opacity: 1;
    background-color: transparent;
  }

  .flickity-viewport {
    overflow: hidden;
  }

  .flickity-page-dots {
    display: none;
  }

  /* Ensure smooth transitions for all state changes */
  .x-transition-all {
    transition: all 0.3s ease;
  }
</style>

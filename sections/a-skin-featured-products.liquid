<!-- featured-product.liquid -->

<div class="featured-product-section">
  <div class="x-w-full x-h-90 x-bg-[#F2E8DA] x-flex x-flex-col x-justify-center x-items-start x-px-[16px] x-h-[180px] x-gap-[16px] md:x-flex-row md:x-justify-between md:x-items-center md:x-px-[50px]">
    <div class="x-text-black x-flex x-flex-col x-gap-4">
      <div class="x-text-[32px] x-leading-10">OUR COLLECTION</div>
      <div class="x-text-[16px] x-italic">Plant Powered • Cruelty Free • Infinitely Recyclable</div>
    </div>
    <button class="x-text-lg x-text-black x-py-4 x-px-40 md:x-py-6 md:x-px-16 x-border-whie x-border-[1px] x-bg-transparent x-border-black x-uppercase hover:x-bg-black hover:x-text-white x-transition-colors x-duration-300">
      SHOP NOW
    </button>
  </div>

  <div class="featured-product-container">
    <!-- Assuming you're showcasing one specific product, hardcode the handle or use dynamic settings -->
    {% assign featured_product = all_products['test-product'] %}
    {% assign featured_product_2 = all_products['test-product-2'] %}
    <!-- Include the product-card snippet, passing the featured product -->
    <div class="x-w-full x-max-w-full md:x-grid x-flex md:x-grid-cols-3 lg:x-grid-cols-5 x-flex-row x-overflow-x-auto x-snap-x x-snap-mandatory x-overflow-hidden">
        {% render 'a-skin-product-card', product: featured_product %}
        {% render 'a-skin-product-card', product: featured_product_2 %}
        {% render 'a-skin-product-card', product: featured_product %}
        {% render 'a-skin-product-card', product: featured_product_2 %}
        {% render 'a-skin-product-card', product: featured_product %}
    </div>

<style>
  .carousel-cell {
    width: 100%;
    max-width: 433px;
    {% comment %} margin-right: 16px; {% endcomment %}
  }

  .flickity-page-dots {
    display: none;
  }

  .flickity-button {
    display: none;
  }

  .flickity-prev-next-button {
    width: 50px;
    height: 50px;
  }

  .flickity-prev-next-button .flickity-button-icon {
    fill: #333; /* You can adjust the color of the arrow buttons */
  }
</style>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.add-to-cart-btn, .plus-btn').forEach((button) => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-product-id');
                const productCard = this.closest('.product-card');
                const variantsContainer = productCard.querySelector('.product-variants');
                const isPlusButton = this.classList.contains('plus-btn');
                const plusButtonText = isPlusButton ? this.querySelector('i') : null;
                const buttonText = this.classList.contains('add-to-cart-btn') ? this.querySelector('.button-text') : null;

                // Handle variant selection first for both Add to Cart and Plus button
                if (variantsContainer && variantsContainer.children.length > 2) {
                    this.classList.add('x-hidden'); // Hide the button (Add to Cart or Plus)
                    variantsContainer.style.transform = 'translateY(-68px)'; // Show the variant options

                    document.querySelectorAll('.variant-btn').forEach((variantBtn) => {
                        variantBtn.removeEventListener('click', variantSelectHandler); // Ensure no duplicate handlers
                        variantBtn.addEventListener('click', variantSelectHandler);

                        function variantSelectHandler() {
                            const selectedVariantId = this.getAttribute('data-variant-id');

                            // Hide variant options
                            variantsContainer.style.transform = 'translateY(0px)';

                            // Now show the button again and proceed with loading-check-AJAX flow
                            if (isPlusButton) {
                                button.classList.remove('x-hidden');
                                plusButtonText.classList.remove('bx-plus');
                                plusButtonText.classList.add('bx-loader', 'bx-spin'); // Show loading spinner for plus button
                            } else if (buttonText) {
                                buttonText.innerHTML = '<i class="bx bx-loader bx-spin"></i>'; // Show loading spinner for Add to Cart button
                            }

                            // Simulate loading, then change to checkmark
                            setTimeout(function () {
                                if (isPlusButton) {
                                    plusButtonText.classList.remove('bx-loader', 'bx-spin');
                                    plusButtonText.classList.add('bx-check'); // Show checkmark for plus button
                                } else if (buttonText) {
                                    buttonText.innerHTML = '✔ ADDED TO CART'; // Show checkmark for Add to Cart button
                                }

                                // Perform AJAX after checkmark, then reset the button
                                setTimeout(function () {
                                    addToCart(selectedVariantId);
                                    resetButton(isPlusButton, plusButtonText, buttonText);
                                }, 500); // AJAX delay
                            }, 1000); // Loading simulation delay
                        }
                    });
                } else {
                    // Directly add to cart if no variants (for non-variant products)
                    if (isPlusButton) {
                        plusButtonText.classList.remove('bx-plus');
                        plusButtonText.classList.add('bx-loader', 'bx-spin');
                    } else if (buttonText) {
                        buttonText.innerHTML = '<i class="bx bx-loader bx-spin"></i>';
                    }

                    setTimeout(function () {
                        if (isPlusButton) {
                            plusButtonText.classList.remove('bx-loader', 'bx-spin');
                            plusButtonText.classList.add('bx-check');
                        } else if (buttonText) {
                            buttonText.innerHTML = '✔ ADDED TO CART';
                        }

                        // Perform AJAX for non-variant products
                        setTimeout(function () {
                            addToCart(productId);
                            resetButton(isPlusButton, plusButtonText, buttonText);
                        }, 500); // AJAX delay
                    }, 1000); // Loading simulation delay
                }
            });
        });
    });

    document.querySelectorAll('.back-btn').forEach((button) => {
        button.addEventListener('click', function () {
            const productCard = this.closest('.product-card');
            const addToCartButton = productCard.querySelector('.add-to-cart-btn');
            const plusButton = productCard.querySelector('.plus-btn');
            const variantsContainer = productCard.querySelector('.product-variants');

            // Hide the variants and show the add-to-cart button again
            variantsContainer.style.transform = 'translateY(0px)';
            addToCartButton.classList.remove('x-hidden');
            plusButton.classList.remove('x-hidden');
        });
    });

    document.querySelectorAll('.variant-btn').forEach(button => {
        button.addEventListener('mouseover', function () {
            const variantId = this.getAttribute('data-variant-id');
            const imageUrl = this.getAttribute('data-image');
            const productCard = this.closest('.product-card');
            const productImage = productCard.querySelector('.product-image img');

            productImage.src = imageUrl;
        });
    });

    function addToCart(productId) {
        // Ensure quantity is always set to 1
        fetch('/cart/add.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id: productId, quantity: 1 }), // Ensure quantity is set to 1
        })
            .then((response) => response.json())
            .then((data) => {
                console.log('Product added to cart:', data);
            })
            .catch((error) => {
                console.error('Error adding to cart:', error);
            });
    }

    function resetButton(isPlusButton, plusButtonText, buttonText) {
        setTimeout(() => {
            if (isPlusButton) {
                plusButtonText.classList.remove('bx-check');
                plusButtonText.classList.add('bx-plus'); // Reset to plus icon
                document.querySelectorAll('.plus-btn').forEach((button) => {
                    button.classList.remove('x-hidden'); // Show the plus button again
                });
            } else if (buttonText) {
                buttonText.innerHTML = 'ADD TO CART'; // Reset Add to Cart text
                document.querySelectorAll('.add-to-cart-btn').forEach((button) => {
                    button.classList.remove('x-hidden'); // Show the Add to Cart button again
                });
            }
        }, 1500); // Delay before resetting the text
    }
</script>